from fastapi import APIRouter, Depends, HTTPException, status
from sqlmodel import Session, select
from app.models import UserWorkspaceFavorited, Workspace
from app.api.deps import get_db
from datetime import datetime, timezone

router = APIRouter()

@router.post("/workspaces/favorite", summary="Favorite a workspace")
def favorite_workspace(
    workspace_id: str,
    user_id: str,
    db: Session = Depends(get_db)
):
    """
    Mark a workspace as favorite for a user.
    """
    # Check if the workspace exists
    workspace_statement = select(Workspace).where(Workspace.id == workspace_id)
    workspace = db.exec(workspace_statement).first()

    if not workspace:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Workspace not found"
        )

    # Check if the workspace is already favorited by the user
    favorite_check_statement = (
        select(UserWorkspaceFavorited)
        .where(
            (UserWorkspaceFavorited.workspace_id == workspace_id) &
            (UserWorkspaceFavorited.user_id == user_id)
        )
    )
    existing_favorite = db.exec(favorite_check_statement).first()

    if existing_favorite:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Workspace is already favorited by the user"
        )

    # Create a new favorite entry
    new_favorite = UserWorkspaceFavorited(
        user_id=user_id,
        workspace_id=workspace_id,
        favorited_date=datetime.now(timezone.utc)
    )
    db.add(new_favorite)

    # Mark workspace as favorite if applicable (optional)
    workspace.is_favorited = True
    db.add(workspace)

    # Commit changes
    db.commit()
    db.refresh(new_favorite)

    return {
        "status_code": 200,
        "message": "Workspace has been successfully marked as favorite",
        "data": {
            "workspace_id": workspace_id,
            "user_id": user_id,
            "favorited_date": new_favorite.favorited_date
        }
    }











from fastapi import APIRouter, Depends, HTTPException
from sqlmodel import Session, select
from app.models import UserWorkspaceFavorited, Workspace
from app.api.deps import get_db

router = APIRouter()

@router.get("/workspaces/favorites", summary="Get all favorited workspaces for a user")
def get_favorited_workspaces(
    user_id: str,
    db: Session = Depends(get_db)
):
    """
    Retrieve all favorited workspaces for a specific user.
    """
    # Query to get all favorited workspace IDs for the user
    favorited_statement = (
        select(UserWorkspaceFavorited.workspace_id)
        .where(UserWorkspaceFavorited.user_id == user_id)
    )
    favorited_workspaces = db.exec(favorited_statement).all()

    if not favorited_workspaces:
        return {
            "status_code": 200,
            "message": "No favorited workspaces found for the user",
            "data": []
        }

    # Retrieve full workspace details for the favorited workspaces
    workspace_ids = [fav.workspace_id for fav in favorited_workspaces]
    workspaces_statement = select(Workspace).where(Workspace.id.in_(workspace_ids))
    workspaces = db.exec(workspaces_statement).all()

    # Build the response
    response_data = []
    for workspace in workspaces:
        response_data.append({
            "workspace_id": str(workspace.id),
            "workspace_name": workspace.name,
            "is_active": workspace.is_active,
            "is_public": workspace.is_public,
            "created_at": workspace.created,  # Assuming `created` is the creation timestamp
            "updated_at": workspace.last_updated  # Assuming `last_updated` is the update timestamp
        })

    return {
        "status_code": 200,
        "message": "Favorited workspaces retrieved successfully",
        "data": response_data
    }










    # Map admin users to workspaces
    admin_user_map = {}
    for link, user in admin_users_results:
        if link.workspace_id not in admin_user_map:
            admin_user_map[link.workspace_id] = []
        admin_user_map[link.workspace_id].append({
            "user_id": str(user.id),
            "username": user.username
        })

    # Build response
    response_data = []
    for workspace in workspaces:
        response_data.append({
            "workspace_id": str(workspace.id),
            "workspace_name": workspace.name,
            "tags": workspace.tags,
            "description": workspace.description,
            "is_active": workspace.is_active,
            "is_public": workspace.is_public,
            "is_favorited": is_favorite,
            "created_at": workspace.created_date,
            "updated_at": workspace.last_updated_date,
            "admins": admin_user_map.get(workspace.id, [])
        })

    return {
        "status_code": 200,
        "message": "Workspaces retrieved successfully",
        "data": response_data
    }




from fastapi import APIRouter, Depends, Query
from sqlmodel import Session, select
from app.models import User, UserWorkspaceLink, Workspace
from app.api.deps import get_db
from typing import Optional

router = APIRouter()

@router.get("/workspaces/admin", summary="Get all admin workspaces with ILIKE search")
def get_admin_workspaces(
    search: Optional[str] = Query(None, description="Search for users by username"),
    skip: int = Query(0, ge=0, description="Number of records to skip"),
    limit: int = Query(10, gt=0, description="Maximum number of records to return"),
    db: Session = Depends(get_db)
):
    """
    Retrieve all admin workspaces filtered by role and optional username search.
    """
    # Query to get users with the role "workspace_admin"
    statement = (
        select(User, UserWorkspaceLink, Workspace)
        .join(UserWorkspaceLink, User.id == UserWorkspaceLink.user_id)
        .join(Workspace, UserWorkspaceLink.workspace_id == Workspace.id)
        .where(UserWorkspaceLink.role == "workspace_admin")
    )

    # Apply ILIKE search if provided
    if search:
        statement = statement.where(User.username.ilike(f"%{search}%"))

    # Apply pagination
    statement = statement.offset(skip).limit(limit)

    # Execute the query
    results = db.exec(statement).all()

    # Build response
    response_data = []
    for user, link, workspace in results:
        response_data.append({
            "user_id": str(user.id),
            "username": user.username,
            "workspace_id": str(workspace.id),
            "workspace_name": workspace.name,
            "is_active": workspace.is_active,
            "is_public": workspace.is_public,
            "role": link.role
        })

    return {
        "status_code": 200,
        "message": "Admin workspaces retrieved successfully",
        "data": response_data
    }








AutoBI

AutoBI is a powerful and flexible business intelligence tool designed to help users generate insights from their data using natural language queries. This project leverages machine learning models to interpret user queries and generate SQL statements to retrieve the necessary data.

Table of Contents

API Reference

Prerequisites

Installation

Usage

Project Structure

Database Migrations (Alembic)

Contributing

API Reference

For detailed API documentation, please visit the API Docs.

Prerequisites

Python 3.10

PostgreSQL (for database storage)

Docker & Kubernetes (if deploying)

Clone the Repository

To get started, clone the repository:

 git clone https://github.com/your-repo/autobi.git
 cd autobi

Installation

To set up the project locally, follow these steps:

pip install --upgrade pip==23.2.1
pip install poetry==1.8.3
poetry install
pip install pre-commit
pre-commit install --hook-type pre-push

Usage

To start the application, run:

python -m uvicorn src.app.main:app --reload --host 0.0.0.0 --port 8080

Project Structure

AUTOBI
│── backend
│── frontend
│── jobs
│── kube/np
│── .gitignore
│── .gitlab-ci.yml
│── src/
│   ├── app/
│   │   ├── main.py        # Entry point for the FastAPI application
│   │   ├── routers/       # Contains all the route handlers
│   │   ├── utils/         # Utility functions and helpers
│   │   ├── models/        # Database models
│   │   ├── migrations/    # Alembic migration scripts
│   │   ├── core/          # Core business logic
│   │   ├── database.py    # Database connection and session
│   │   ├── config_setup.py # Configuration setup
│   │   ├── app_initializer.py # Initializes components
│   │   ├── tests/         # Unit and integration tests
│── README.md  # Project documentation
│── pyproject.toml  # Poetry configuration

Database Migrations (Alembic)

The AutoBI project uses Alembic for database migrations. To set up and run migrations, follow these steps:

Initialize Alembic (if not already initialized):

alembic init src/migrations

Generate a new migration:

alembic revision --autogenerate -m "describe_changes"

Apply migrations:

alembic upgrade head

Downgrade migrations (if needed):

alembic downgrade -1

Contributing

We welcome contributions to the AutoBI project. To contribute, follow these steps:

Fork the repository.

Create a new branch:

git checkout -b feature/your-feature-name

Make your changes.

Commit your changes:

git commit -m "Add some feature"

Push to the branch:

git push origin feature/your-feature-name

Open a pull request.

Ensure your code adheres to coding standards and includes appropriate tests.

Author: Shivansh Mathur | Incedo Inc.

For further assistance, contact the development team.

